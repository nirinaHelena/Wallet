package org.example.repository;import org.example.model.Transaction;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class CruTransaction implements CrudOperationInterface<Transaction> {    private Connection connection;    @Override    public List<Transaction> findAll() {        List<Transaction> transactionList = new ArrayList<>();        String sql = "SELECT * FROM transaction";        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                transactionList.add(new Transaction(                        resultSet.getLong("id"),                        resultSet.getLong("sender_id"),                        resultSet.getLong("receiver_id"),                        resultSet.getInt("amount")                        // Add other fields as needed                ));            }        } catch (SQLException e) {            e.printStackTrace();        }        return transactionList;    }    @Override    public List<Transaction> saveAll(List<Transaction> toSave) {        List<Transaction> transactionList = new ArrayList<>();        for (Transaction transaction : toSave) {            Transaction savedTransaction = save(transaction);            if (savedTransaction != null) {                transactionList.add(savedTransaction);            }        }        return transactionList;    }    @Override    public Transaction save(Transaction toSave) {        String sql = "INSERT INTO transaction (sender_id, receiver_id, amount) VALUES (?, ?, ?)";        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setLong(1, toSave.getSenderId());            preparedStatement.setLong(2, toSave.getReceiverId());            preparedStatement.setInt(3, toSave.getAmount());            int affected = preparedStatement.executeUpdate();            if (affected > 0) {                return toSave;            }        } catch (SQLException e) {            e.printStackTrace();        }        return null;    }}