package org.example.repository;import org.example.model.Transaction;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class CruTransaction implements CrudOperationInterface<Transaction> {    private Connection connection;    @Override    public List<Transaction> findAll() {        List<Transaction> transactionList = new ArrayList<>();        String sql = "SELECT * FROM transaction";        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                Transaction transaction = new Transaction(                        null, // account                        resultSet.getDouble("amount"),                        null, // device                        resultSet.getString("label"),                        resultSet.getDate("date").toLocalDate(),                        resultSet.getTimestamp("hour").toLocalDateTime(),                        resultSet.getString("note"),                        null, // paiementMethod                        null, // paiementStatus                        resultSet.getString("location")                );                transactionList.add(transaction);            }        } catch (SQLException e) {            e.printStackTrace();        }        return transactionList;    }    @Override    public List<Transaction> saveAll(List<Transaction> toSave) {        List<Transaction> transactionList = new ArrayList<>();        for (Transaction transaction : toSave) {            Transaction savedTransaction = save(transaction);            if (savedTransaction != null) {                transactionList.add(savedTransaction);            }        }        return transactionList;    }    @Override    public Transaction save(Transaction toSave) {        String sql = "INSERT INTO transaction (amount, label, date, hour, note, location) VALUES (?, ?, ?, ?, ?, ?)";        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setDouble(1, toSave.getAmount());            preparedStatement.setString(2, toSave.getLabel());            preparedStatement.setDate(3, java.sql.Date.valueOf(toSave.getDate()));            preparedStatement.setTimestamp(4, java.sql.Timestamp.valueOf(toSave.getHour()));            preparedStatement.setString(5, toSave.getNote());            preparedStatement.setString(6, toSave.getLocation());            int affected = preparedStatement.executeUpdate();            if (affected > 0) {                return toSave;            }        } catch (SQLException e) {            e.printStackTrace();        }        return null;    }}